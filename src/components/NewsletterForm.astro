---
import isValidEmail from "@/utils/validateEmail";


const errors = { email: "" };
if (Astro.request.method === "POST") {
    const data = await Astro.request.formData();
    const email = data.get("email");

    if (typeof email !== "string" || !isValidEmail(email)) {
      errors.email = "Email is not valid. ";
    }
    const hasErrors = Object.values(errors).some((msg) => msg);

    if (!hasErrors) {
      const apiKey = import.meta.env.MAILCHIMP_API_KEY
      const server = "us10"
      const listNumber = "816e41a839"

      const url = "https://" + server + ".api.mailchimp.com/3.0/lists/" + listNumber;
      const postData = JSON.stringify({
        members:[{
          email_address: email,
          status: "subscribed"
        }]
      })
      const options = {
        method:"POST",
        headers: {
          Authorization: 'Basic ' + Buffer.from('any:' + apiKey).toString('base64'),
          'Content-Type': 'application/json;charset=utf-8'
        },
        body: postData
      }
      await fetch(url, options)
    }  
}

---
<form method="POST" class="flex flex-col gap-4">
  <label class="group flex max-w-sm cursor-pointer flex-col gap-2">
    <p class="pb-2">Email</p>
    <input type="email" name="email" required class="rounded-md border border-neutral-700 p-4 text-black"/>
  </label>
  {errors.email && <p>{errors.email}</p>}
  <button class="group flex max-w-sm cursor-pointer flex-col gap-2 rounded-md border border-neutral-700 p-4 hover:bg-violet-600 active:bg-violet-700 text-white">Subscribe</button>
</form>
